name: Copilot Automated Test Execution

# Triggered after Copilot commits or when task completion is detected
on:
  workflow_dispatch:
    inputs:
      trigger_reason:
        description: 'Reason for test execution'
        required: false
        default: 'Manual trigger'
        type: string
  push:
    branches: [ main, develop, copilot/* ]
    paths:
      - 'lib/**'
      - 'test/**'
      - 'pubspec.yaml'
      - '.github/workflows/**'
  
# Prevent concurrent runs of this workflow
concurrency:
  group: copilot-tests-${{ github.ref }}
  cancel-in-progress: true

env:
  FLUTTER_VERSION: '3.35.2'

jobs:
  automated-testing:
    name: Copilot Automated Test Suite
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    timeout-minutes: 15  # Maximum 15 minutes for complete test suite
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
          cache-key: "flutter-:os:-:channel:-:version:-:arch:"
          pub-cache-key: "pub-:os:-:channel:-:version:-:arch:-:${{ hashFiles('**/pubspec.lock') }}"

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Get dependencies
        run: flutter pub get
        timeout-minutes: 2

      - name: Code analysis
        id: analyze
        run: |
          echo "Running code analysis..."
          if flutter analyze > analyze.log 2>&1; then
            echo "‚úÖ Code analysis passed"
            echo "analyze_passed=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Code analysis failed"
            echo "analyze_passed=false" >> $GITHUB_OUTPUT
            cat analyze.log
          fi
        timeout-minutes: 2

      - name: Fix code analysis issues
        if: steps.analyze.outputs.analyze_passed == 'false'
        run: |
          echo "üîß Attempting to auto-fix code analysis issues..."
          # Apply dart fix if available
          if dart fix --dry-run 2>/dev/null | grep -q "Apply"; then
            dart fix --apply
            echo "Applied dart fix automatically"
          fi
          
          # Re-run analysis
          if flutter analyze; then
            echo "‚úÖ Code analysis issues fixed"
          else
            echo "‚ùå Could not auto-fix all analysis issues"
            exit 1
          fi

      - name: Code formatting check
        id: format
        run: |
          echo "Checking code formatting..."
          if dart format --output none --set-exit-if-changed .; then
            echo "‚úÖ Code is properly formatted"
            echo "format_needed=false" >> $GITHUB_OUTPUT
          else
            echo "üîß Code formatting needed"
            echo "format_needed=true" >> $GITHUB_OUTPUT
          fi

      - name: Apply code formatting
        if: steps.format.outputs.format_needed == 'true'
        run: |
          echo "üîß Applying code formatting..."
          dart format .
          echo "‚úÖ Code formatting applied"

      - name: Run unit tests
        id: unit_tests
        run: |
          echo "üß™ Running unit tests (excluding integration)..."
          if flutter test \
            --exclude-tags=integration \
            --coverage \
            --reporter=expanded \
            --timeout=180s > unit_test.log 2>&1; then
            echo "‚úÖ Unit tests passed"
            echo "unit_tests_passed=true" >> $GITHUB_OUTPUT
            # Show test summary
            tail -20 unit_test.log
          else
            echo "‚ùå Unit tests failed"
            echo "unit_tests_passed=false" >> $GITHUB_OUTPUT
            cat unit_test.log
          fi
        timeout-minutes: 5

      - name: Investigate unit test failures
        if: steps.unit_tests.outputs.unit_tests_passed == 'false'
        run: |
          echo "üîç Investigating unit test failures..."
          echo "=== Unit Test Failure Analysis ==="
          
          # Extract specific failure information
          if grep -q "FAILED" unit_test.log; then
            echo "Failed tests found:"
            grep -A 5 -B 5 "FAILED" unit_test.log || true
          fi
          
          if grep -q "Expected:" unit_test.log; then
            echo "Assertion failures found:"
            grep -A 10 -B 5 "Expected:" unit_test.log || true
          fi
          
          echo "üìù Unit test failure details saved for review"
          # Note: Actual fixes would require more sophisticated analysis
          # This is a framework for investigation
          exit 1

      - name: Start integration test services
        if: steps.unit_tests.outputs.unit_tests_passed == 'true'
        id: services
        working-directory: test/integration
        run: |
          echo "üê≥ Starting Docker Compose services for integration tests..."
          
          # Clean up any existing containers
          docker-compose down -v --remove-orphans 2>/dev/null || true
          
          # Start services
          docker-compose up -d
          echo "services_started=true" >> $GITHUB_OUTPUT
          
          echo "‚è≥ Waiting for services to be ready..."
        timeout-minutes: 3

      - name: Wait for integration test services
        if: steps.services.outputs.services_started == 'true'
        working-directory: test/integration
        run: |
          # Wait for services to be healthy
          timeout=300
          interval=10
          elapsed=0
          services=(influxdb mosquitto telegraf)

          echo "Waiting for services (up to ${timeout}s)..."
          while [ $elapsed -lt $timeout ]; do
            ready=0
            for s in "${services[@]}"; do
              cid="$(docker-compose ps -q "$s" || true)"
              if [ -z "$cid" ]; then
                echo "Service '$s' not found yet"
                continue
              fi
              state="$(docker inspect -f '{{.State.Status}}' "$cid" 2>/dev/null || echo 'unknown')"
              health="$(docker inspect -f '{{if .State.Health}}{{.State.Health.Status}}{{end}}' "$cid" 2>/dev/null || echo '')"
              printf "%-10s state=%-8s health=%s\n" "$s" "$state" "${health:-n/a}"
              if [ "$health" = "healthy" ] || [ "$state" = "running" ]; then
                ready=$((ready+1))
              fi
            done

            if [ $ready -ge 2 ] || [ $ready -eq ${#services[@]} ]; then
              echo "‚úÖ Services are ready (ready count: $ready/${#services[@]})."
              break
            fi

            elapsed=$((elapsed + interval))
            echo "‚è≥ Waiting... (${elapsed}/${timeout}s)"
            sleep $interval
          done

          if [ $elapsed -ge $timeout ]; then
            echo "‚ùå Services did not become ready in time"
            echo "=== docker-compose ps ==="
            docker-compose ps
            echo "=== Recent logs ==="
            docker-compose logs --tail=100 || true
            exit 1
          fi
        timeout-minutes: 6

      - name: Run integration tests
        if: steps.services.outputs.services_started == 'true'
        id: integration_tests
        run: |
          echo "üî¨ Running integration tests..."
          if flutter test test/integration/ \
            --coverage \
            --reporter=expanded \
            --timeout=240s > integration_test.log 2>&1; then
            echo "‚úÖ Integration tests passed"
            echo "integration_tests_passed=true" >> $GITHUB_OUTPUT
            tail -20 integration_test.log
          else
            echo "‚ùå Integration tests failed"
            echo "integration_tests_passed=false" >> $GITHUB_OUTPUT
            cat integration_test.log
          fi
        timeout-minutes: 5

      - name: Investigate integration test failures
        if: steps.integration_tests.outputs.integration_tests_passed == 'false'
        working-directory: test/integration
        run: |
          echo "üîç Investigating integration test failures..."
          echo "=== Integration Test Failure Analysis ==="
          
          # Show service logs for debugging
          echo "=== InfluxDB Logs ==="
          docker-compose logs influxdb --tail=50 || true
          
          echo "=== Mosquitto Logs ==="
          docker-compose logs mosquitto --tail=50 || true
          
          echo "=== Telegraf Logs ==="
          docker-compose logs telegraf --tail=50 || true
          
          echo "=== Service Status ==="
          docker-compose ps || true
          
          # Extract specific failure information
          cd ../..
          if grep -q "FAILED" integration_test.log; then
            echo "Failed integration tests:"
            grep -A 10 -B 5 "FAILED" integration_test.log || true
          fi
          
          echo "üìù Integration test failure details saved for review"
          exit 1

      - name: Generate coverage report
        if: steps.unit_tests.outputs.unit_tests_passed == 'true' && steps.integration_tests.outputs.integration_tests_passed == 'true'
        run: |
          echo "üìä Generating test coverage report..."
          if command -v lcov >/dev/null 2>&1; then
            lcov --remove coverage/lcov.info \
              'lib/generated/*' \
              'lib/**/*.g.dart' \
              'lib/**/*.freezed.dart' \
              -o coverage/lcov_filtered.info
            echo "‚úÖ Coverage report generated"
          else
            echo "‚ö†Ô∏è lcov not available, skipping HTML coverage report"
          fi

      - name: Commit formatting changes
        if: steps.format.outputs.format_needed == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "Copilot Agent"
          git add .
          if ! git diff --staged --quiet; then
            git commit -m "üîß Auto-format code with dart format [copilot-auto-fix]"
            git push origin HEAD:${{ github.ref_name }}
            echo "‚úÖ Code formatting changes committed"
          fi

      - name: Stop integration test services
        if: always() && steps.services.outputs.services_started == 'true'
        working-directory: test/integration
        run: |
          echo "üßπ Stopping Docker Compose services..."
          docker-compose down -v --remove-orphans
          echo "‚úÖ Services stopped and volumes removed"

      - name: Report test results
        if: always()
        run: |
          echo "üìã Copilot Automated Test Execution Summary"
          echo "============================================"
          echo "Code Analysis: ${{ steps.analyze.outputs.analyze_passed }}"
          echo "Code Formatting: ${{ steps.format.outputs.format_needed == 'false' && '‚úÖ Already formatted' || 'üîß Applied formatting' }}"
          echo "Unit Tests: ${{ steps.unit_tests.outputs.unit_tests_passed }}"
          echo "Integration Tests: ${{ steps.integration_tests.outputs.integration_tests_passed }}"
          
          # Determine overall result
          if [ "${{ steps.unit_tests.outputs.unit_tests_passed }}" = "true" ] && \
             [ "${{ steps.integration_tests.outputs.integration_tests_passed }}" = "true" ]; then
            echo "üéâ All tests passed successfully!"
            exit 0
          else
            echo "‚ùå Some tests failed - review logs above for details"
            exit 1
          fi

      - name: Comment on PR with test results
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const unitPassed = '${{ steps.unit_tests.outputs.unit_tests_passed }}' === 'true';
            const integrationPassed = '${{ steps.integration_tests.outputs.integration_tests_passed }}' === 'true';
            const formatApplied = '${{ steps.format.outputs.format_needed }}' === 'true';
            
            const formatMsg = formatApplied ? 'üîß Applied code formatting automatically\n' : '';
            const unitMsg = unitPassed ? '‚úÖ Unit tests passed (50+ tests)' : '‚ùå Unit tests failed';
            const integrationMsg = integrationPassed ? '‚úÖ Integration tests passed' : '‚ùå Integration tests failed';
            
            const status = unitPassed && integrationPassed ? 'üéâ All tests passed!' : '‚ùå Some tests failed';
            
            const body = `### ü§ñ Copilot Automated Test Results
            
            ${formatMsg}${unitMsg}
            ${integrationMsg}
            
            **Overall Status:** ${status}
            
            ${!unitPassed || !integrationPassed ? 
              'Please review the workflow logs for failure details. Copilot Agent will investigate and attempt to fix issues automatically.' : 
              'All automated tests completed successfully!'}`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });