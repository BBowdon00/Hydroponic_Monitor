name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  FLUTTER_VERSION: '3.35.2'

jobs:
  # Format code and auto-commit changes
  format:
    name: Code Formatting
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Get dependencies
        run: flutter pub get

      - name: Check if formatting is needed
        id: check-format
        run: |
          if ! dart format --output none --set-exit-if-changed .; then
            echo "needs_format=true" >> $GITHUB_OUTPUT
            echo "Code formatting changes needed"
          else
            echo "needs_format=false" >> $GITHUB_OUTPUT
            echo "Code is already properly formatted"
          fi

      - name: Format code
        if: steps.check-format.outputs.needs_format == 'true'
        run: dart format .

      - name: Commit formatted code
        if: steps.check-format.outputs.needs_format == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action Bot"
          git add .
          if ! git diff --staged --quiet; then
            git commit -m "üîß Auto-format code with dart format [skip ci]"
            git push
            echo "Code has been automatically formatted and committed"
          else
            echo "No formatting changes to commit"
          fi

      - name: Comment on PR about formatting
        if: steps.check-format.outputs.needs_format == 'true' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'üîß Code has been automatically formatted with `dart format` and committed.'
            })

  # Analyze code quality
  analyze:
    name: Code Analysis
    runs-on: ubuntu-latest
    needs: format
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Get dependencies
        run: flutter pub get

      - name: Analyze code (fail on error/warning)
        run: |
            flutter analyze | tee analyze.log
            if grep -qE "error|warning" analyze.log; then
              echo "‚ùå Errors or warnings found in analysis."
              exit 1
            else
              echo "‚úÖ No errors or warnings."
            fi
        

  # Run unit tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: analyze
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Get dependencies
        run: flutter pub get

      - name: Run unit tests
        run: |
          flutter test \
            --coverage \
            --reporter=expanded \
            --exclude-tags=integration

      - name: Upload unit test coverage
        uses: codecov/codecov-action@v4
        with:
          file: coverage/lcov.info
          flags: unit-tests
          name: unit-tests
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  # Run integration tests with Docker Compose
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Get dependencies
        run: flutter pub get

      - name: Start integration test services
        working-directory: test/integration
        run: |
          echo "Starting Docker Compose services..."
          docker-compose up -d
          echo "Services started, waiting for readiness..."

      - name: Wait for services to be ready
        working-directory: test/integration
        run: |
          echo "Checking service health..."
          timeout=300
          elapsed=0
          interval=15
          
          while [ $elapsed -lt $timeout ]; do
            # Check if all services are healthy or running
            services_status=$(docker-compose ps --format "table {{.Name}}\t{{.State}}")
            echo "Service status:"
            echo "$services_status"
            
            healthy_count=$(echo "$services_status" | grep -c "healthy" || echo "0")
            running_count=$(echo "$services_status" | grep -c "running" || echo "0")
            
            if [ "$healthy_count" -ge 2 ] || [ "$running_count" -eq 3 ]; then
              echo "‚úÖ Services are ready! (Healthy: $healthy_count, Running: $running_count)"
              break
            fi
            
            echo "‚è≥ Waiting for services... ($elapsed/$timeout seconds)"
            sleep $interval
            elapsed=$((elapsed + interval))
          done
          
          if [ $elapsed -ge $timeout ]; then
            echo "‚ùå Services did not become ready in time"
            echo "Final service status:"
            docker-compose ps
            echo "Service logs:"
            docker-compose logs --tail=50
            exit 1
          fi

      - name: Run integration tests
        run: |
          flutter test test/integration/ \
            --coverage \
            --reporter=expanded \
            --timeout=240s

      - name: Show service logs on failure
        if: failure()
        working-directory: test/integration
        run: |
          echo "=== Docker Compose Service Status ==="
          docker-compose ps
          
          echo "=== InfluxDB Logs ==="
          docker-compose logs influxdb | tail -100
          
          echo "=== Mosquitto Logs ==="
          docker-compose logs mosquitto | tail -100
          
          echo "=== Telegraf Logs ==="
          docker-compose logs telegraf | tail -100

      - name: Stop integration test services
        if: always()
        working-directory: test/integration
        run: |
          echo "Stopping Docker Compose services..."
          docker-compose down -v
          echo "Services stopped and volumes removed"

      - name: Upload integration test coverage
        if: always()
        uses: codecov/codecov-action@v4
        with:
          file: coverage/lcov.info
          flags: integration-tests
          name: integration-tests
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  # Build artifacts
  build:
    name: Build Artifacts
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    strategy:
      matrix:
        target: [web, android-debug]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java (Android only)
        if: matrix.target == 'android-debug'
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Get dependencies
        run: flutter pub get

      - name: Build web
        if: matrix.target == 'web'
        run: flutter build web --no-tree-shake-icons

      - name: Build Android debug APK
        if: matrix.target == 'android-debug'
        run: flutter build apk --debug
        continue-on-error: true  # May fail in CI environments

      - name: Upload web build artifacts
        if: matrix.target == 'web'
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: build/web/
          retention-days: 30

      - name: Upload Android debug APK
        if: matrix.target == 'android-debug' && success()
        uses: actions/upload-artifact@v4
        with:
          name: android-debug-apk
          path: build/app/outputs/flutter-apk/app-debug.apk
          retention-days: 30
