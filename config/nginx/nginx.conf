# Nginx reverse proxy for Hydroponic Monitor
# Provides unified access to InfluxDB (HTTP) and Mosquitto (MQTT over WebSocket)
#
# Exposed paths:
#  /api/v2/*    -> Direct InfluxDB HTTP API (preferred pathless base for clients)
#  /influxdb/*  -> Legacy InfluxDB HTTP API (backward compatible; slated for deprecation)
#  (removed) /ping and /ready consolidated to single /health endpoint
#  /mqtt        -> WebSocket endpoint for MQTT (proxied to mosquitto:9001)
#
# Optional: raw TCP MQTT proxy (1883) would require stream{} block and different container image build.
# For now we proxy only WebSocket MQTT traffic, which the Flutter web client can use.

user  nginx;
worker_processes  auto;

events { worker_connections 1024; }

http {
  # NOTE: Removed prior global CORS origin map & headers to revert to explicit per-location CORS control.
  # If a dynamic allowlist is later required, reintroduce a map here before the server block.
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;
  sendfile        on;
  keepalive_timeout  65;

  # Log format (can be tuned later)
  log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                  '$status $body_bytes_sent "$http_referer" '
                  '"$http_user_agent" "$http_x_forwarded_for"';

  access_log  /var/log/nginx/access.log  main;
  error_log   /var/log/nginx/error.log warn;

  # Gzip (optional)
  gzip on;
  gzip_types text/plain application/json application/javascript text/css application/xml text/xml;

  # Upstreams
  upstream influxdb_upstream {
    server influxdb:8086;
    keepalive 16;
  }

  upstream mqtt_ws_upstream {
    server mosquitto:9001;
  }

  server {
    listen 80;
    server_name _;

  # (Global CORS headers removed) â€” relying solely on explicit per-location headers now.

    # Preferred pathless InfluxDB API
    # Allows clients to set base URL to http://host (no /influxdb suffix)
    # Requests generated by influxdb_client (e.g., /api/v2/query) match this location directly.
    location /api/v2/ {
      proxy_pass http://influxdb_upstream/api/v2/;
      proxy_http_version 1.1;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      # Suppress upstream CORS headers to avoid duplicates (Influx may emit its own)
      proxy_hide_header Access-Control-Allow-Origin;
      proxy_hide_header Access-Control-Allow-Credentials;
      proxy_hide_header Access-Control-Allow-Methods;
      proxy_hide_header Access-Control-Allow-Headers;
      proxy_hide_header Access-Control-Expose-Headers;
      # CORS headers
      add_header Access-Control-Allow-Origin $http_origin always;
      add_header Access-Control-Allow-Credentials 'true' always;
      add_header Access-Control-Allow-Methods 'GET,POST,PUT,PATCH,DELETE,OPTIONS' always;
      add_header Access-Control-Allow-Headers 'Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Requested-With,X-Influxdb-User-Agent' always;
      add_header Access-Control-Expose-Headers 'X-Request-Id,Date' always;

      if ($request_method = OPTIONS) {
        # Enhanced preflight response with dynamic headers and 200 status
        add_header Access-Control-Allow-Origin $http_origin always;
        add_header Access-Control-Allow-Credentials 'true' always;
        add_header Access-Control-Allow-Methods 'GET,POST,PUT,PATCH,DELETE,OPTIONS' always;
        add_header Access-Control-Allow-Headers '$http_access_control_request_headers,Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Requested-With,X-Influxdb-User-Agent' always;
        add_header Access-Control-Expose-Headers 'X-Request-Id,Date' always;
        add_header Vary 'Origin, Access-Control-Request-Method, Access-Control-Request-Headers' always;
        return 200;
      }
    }

    # Legacy InfluxDB API under /influxdb (will rewrite to root so api/v2 paths still resolve)
    location /influxdb/ {
      proxy_pass http://influxdb_upstream/;
      proxy_http_version 1.1;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      # Strip /influxdb prefix
      rewrite ^/influxdb/(.*)$ /$1 break;
      # Suppress upstream CORS headers to avoid duplicates
      proxy_hide_header Access-Control-Allow-Origin;
      proxy_hide_header Access-Control-Allow-Credentials;
      proxy_hide_header Access-Control-Allow-Methods;
      proxy_hide_header Access-Control-Allow-Headers;
      proxy_hide_header Access-Control-Expose-Headers;

      # CORS headers
      add_header Access-Control-Allow-Origin $http_origin always;
      add_header Access-Control-Allow-Credentials 'true' always;
      add_header Access-Control-Allow-Methods 'GET,POST,PUT,PATCH,DELETE,OPTIONS' always;
      add_header Access-Control-Allow-Headers 'Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Requested-With,X-Influxdb-User-Agent' always;
      add_header Access-Control-Expose-Headers 'X-Request-Id,Date' always;

      # Handle preflight early
      if ($request_method = OPTIONS) {
        add_header Content-Length 0;
        add_header Content-Type text/plain;
        return 204;
      }
    }

    # Health endpoint (used by client and monitoring; replaces prior /ping and /ready)
    location = /health {
      # Returns 200 JSON from InfluxDB; CORS headers mirror /influxdb block.
      add_header Access-Control-Allow-Origin $http_origin always;
      add_header Access-Control-Allow-Credentials 'true' always;
      add_header Access-Control-Allow-Methods 'GET,POST,PUT,PATCH,DELETE,OPTIONS' always;
      add_header Access-Control-Allow-Headers 'Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Requested-With,X-Influxdb-User-Agent' always;
      add_header Access-Control-Expose-Headers 'X-Request-Id,Date' always;
      if ($request_method = OPTIONS) {
        # Respond to preflight with 200 and explicit headers; 204 sometimes strips headers in certain browser versions.
        add_header Access-Control-Allow-Origin $http_origin always;
        add_header Access-Control-Allow-Credentials 'true' always;
        add_header Access-Control-Allow-Methods 'GET,POST,PUT,PATCH,DELETE,OPTIONS' always;
        # Echo requested headers (merge with fixed allow list)
        add_header Access-Control-Allow-Headers '$http_access_control_request_headers,Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Requested-With,X-Influxdb-User-Agent' always;
        add_header Access-Control-Expose-Headers 'X-Request-Id,Date' always;
        add_header Vary 'Origin, Access-Control-Request-Method, Access-Control-Request-Headers' always;
        return 200;
      }
      proxy_pass http://influxdb_upstream/health;
    }

    # MQTT over WebSocket at /mqtt
    location /mqtt/ {
      proxy_pass http://mqtt_ws_upstream/;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "Upgrade";
      proxy_set_header Host $host;
      proxy_read_timeout 600s;
      # Strip /mqtt prefix
      rewrite ^/mqtt/(.*)$ /$1 break;

      # CORS for WebSocket handshake (some browsers still enforce origin)
      add_header Access-Control-Allow-Origin $http_origin always;
      add_header Access-Control-Allow-Credentials 'true' always;
      add_header Access-Control-Allow-Methods 'GET,OPTIONS' always;
      add_header Access-Control-Allow-Headers 'Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Requested-With' always;

      if ($request_method = OPTIONS) {
        add_header Content-Length 0;
        add_header Content-Type text/plain;
        return 204;
      }
    }

    # Default root response
    location / {
      return 200 'Hydroponic Reverse Proxy Active';
      add_header Content-Type text/plain;
    }
  }
}
