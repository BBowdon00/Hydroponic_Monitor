# Global tags - can be overridden by environment variables
[global_tags]
  environment = "${TELEGRAF_ENV:-production}"
  project = "hydroponic_monitor"

[agent]
  interval = "1s"
  round_interval = true
  metric_batch_size = 1
  metric_buffer_limit = 1000
  collection_jitter = "0s"
  flush_interval = "1s"
  flush_jitter = "0s"
  logfile = ""
  omit_hostname = false
# New simplified MQTT Telegraf config
# Topics: {project}/{deviceNode}/{deviceCategory} for status messages
# Topics: {project}/{deviceNode}/{deviceCategory}/set for commands
# E.g. grow/esp32_1/device or grow/rpi/sensor or grow/rpi/actuator/set

[[inputs.mqtt_consumer]]
  servers = ["tcp://localhost:1883"]
  topics = ["grow/+/+"]

  data_format = "json_v2"
  
  # Convert string fields to appropriate numeric types
  [inputs.mqtt_consumer.json_v2]
    measurement_name = "_"
    timestamp_path = ""
    timestamp_format = ""
    
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "value"
      type = "float"
      optional = true
    
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "running"
      type = "bool"
      optional = true

    [[inputs.mqtt_consumer.json_v2.field]]
      path = "description"
      type = "string"
      optional = true

    # Extract tags from JSON payload
    [[inputs.mqtt_consumer.json_v2.tag]]
      path = "deviceType"
      
    [[inputs.mqtt_consumer.json_v2.tag]]
      path = "deviceID"
      
    [[inputs.mqtt_consumer.json_v2.tag]]
      path = "location"

  # Topic parsing will add additional tags: project, deviceNode, deviceCategory
  [inputs.mqtt_consumer.topic_parsing]
    measurement = "_"
    tags = "project/deviceNode/deviceCategory"
    # Override measurement based on device category
    [inputs.mqtt_consumer.topic_parsing.measurement_override]
      sensor = "sensor"
      actuator = "actuator_state" 
      device = "device_state"

# Separate consumer for device commands (grow/+/+/set)
[[inputs.mqtt_consumer]]
  servers = ["tcp://localhost:1883"]
  topics = ["grow/+/+/set"]

  data_format = "json_v2"
  
  [inputs.mqtt_consumer.json_v2]
    measurement_name = "device_command"
    timestamp_path = "timestamp"
    timestamp_format = "2006-01-02T15:04:05Z07:00"
    
    # Command fields
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "command"
      type = "string"
    
    # Device ID tag
    [[inputs.mqtt_consumer.json_v2.tag]]
      path = "deviceID"

  # Topic parsing for command topics: project/deviceNode/deviceCategory/action
  [inputs.mqtt_consumer.topic_parsing]
    measurement = "device_command"
    tags = "project/deviceNode/deviceCategory/action"

# Production: Environment data -> grow_data bucket
[[outputs.influxdb_v2]]
  urls = ["$INFLUX_URL"]
  token = "$INFLUX_TOKEN"
  organization = "$INFLUX_ORG"
  bucket = "grow_data"
  # Match the actual measurement names from override
  namepass = ["sensor", "actuator_state", "device_state", "device_command"]
  [outputs.influxdb_v2.tagdrop]
    environment = ["integration_test"]

# Test: All data -> test bucket  
[[outputs.influxdb_v2]]
  urls = ["$INFLUX_URL"]
  token = "$INFLUX_TOKEN"
  organization = "$INFLUX_ORG"
  bucket = "test-bucket"
  namepass = ["sensor", "actuator_state", "device_state", "device_command"]
  [outputs.influxdb_v2.tagpass]
    environment = ["integration_test"]